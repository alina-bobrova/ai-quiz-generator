from django.contrib.auth.models import User
from .models import UserStats, Achievement, UserAchievement, Quiz, UserAnswer


def get_or_create_user_stats(user):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    stats, created = UserStats.objects.get_or_create(user=user)
    return stats


def update_user_stats(user, quiz_completed=False, questions_answered=0, correct_answers=0, quiz_score=0):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    stats = get_or_create_user_stats(user)
    
    if quiz_completed:
        stats.total_quizzes_completed += 1
        stats.total_questions_answered += questions_answered
        stats.total_correct_answers += correct_answers
        
        # –ù–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
        points_earned = calculate_quiz_points(quiz_score, questions_answered, correct_answers)
        stats.total_points += points_earned
        
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
        from .models import Quiz
        completed_quizzes = Quiz.objects.filter(user=user, score__isnull=False)
        if completed_quizzes.exists():
            total_score = sum(quiz.score for quiz in completed_quizzes)
            stats.average_score = total_score / completed_quizzes.count()
    
    stats.save()
    check_achievements(user)
    return stats


def calculate_quiz_points(quiz_score, questions_answered, correct_answers):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –æ—á–∫–∏ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞"""
    base_points = 10  # –ë–∞–∑–æ–≤—ã–µ –æ—á–∫–∏ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
    
    # –ë–æ–Ω—É—Å –∑–∞ —Ç–æ—á–Ω–æ—Å—Ç—å
    if questions_answered > 0:
        accuracy = (correct_answers / questions_answered) * 100
        if accuracy >= 100:
            accuracy_bonus = 20
        elif accuracy >= 90:
            accuracy_bonus = 15
        elif accuracy >= 80:
            accuracy_bonus = 10
        elif accuracy >= 70:
            accuracy_bonus = 5
        else:
            accuracy_bonus = 0
    else:
        accuracy_bonus = 0
    
    # –ë–æ–Ω—É—Å –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
    questions_bonus = min(questions_answered * 2, 20)  # –ú–∞–∫—Å–∏–º—É–º 20 –æ—á–∫–æ–≤ –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
    
    # –ë–æ–Ω—É—Å –∑–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç—å (–±–æ–ª—å—à–µ –≤–æ–ø—Ä–æ—Å–æ–≤ = –±–æ–ª—å—à–µ –æ—á–∫–æ–≤)
    difficulty_bonus = 0
    if questions_answered >= 20:
        difficulty_bonus = 15
    elif questions_answered >= 15:
        difficulty_bonus = 10
    elif questions_answered >= 10:
        difficulty_bonus = 5
    
    total_points = base_points + accuracy_bonus + questions_bonus + difficulty_bonus
    return int(total_points)


def check_achievements(user):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
    stats = get_or_create_user_stats(user)
    achievements = Achievement.objects.all()
    
    for achievement in achievements:
        if not UserAchievement.objects.filter(user=user, achievement=achievement).exists():
            if check_achievement_condition(user, achievement, stats):
                UserAchievement.objects.create(user=user, achievement=achievement)
                # –û—á–∫–∏ –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
                stats.total_points += achievement.points
                stats.save()


def check_achievement_condition(user, achievement, stats):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏–µ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
    condition = achievement.condition
    
    if condition == "first_quiz":
        return stats.total_quizzes_created >= 1
    elif condition == "quiz_creator":
        return stats.total_quizzes_created >= 5
    elif condition == "quiz_master":
        return stats.total_quizzes_created >= 10
    elif condition == "perfectionist":
        return stats.average_score >= 90 and stats.total_quizzes_completed >= 5
    elif condition == "accuracy_king":
        return stats.get_accuracy_percentage() >= 95 and stats.total_quizzes_completed >= 3
    elif condition == "speed_demon":
        return stats.total_quizzes_completed >= 20
    elif condition == "dedicated_learner":
        return stats.total_quizzes_completed >= 50
    elif condition == "scholar":
        return stats.total_questions_answered >= 100
    elif condition == "question_master":
        return stats.total_questions_answered >= 500
    elif condition == "genius":
        return stats.average_score >= 95 and stats.total_quizzes_completed >= 10
    elif condition == "points_collector":
        return stats.total_points >= 500
    elif condition == "points_master":
        return stats.total_points >= 1000
    
    return False


def get_user_rank(user):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    stats = get_or_create_user_stats(user)
    all_stats = UserStats.objects.all().order_by('-total_points')
    
    for i, stat in enumerate(all_stats):
        if stat.user == user:
            return i + 1
    return 0


def get_top_users(limit=10):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    return UserStats.objects.all().order_by('-total_points')[:limit]


def sync_user_stats(user):
    """–ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    from .models import Quiz, UserAnswer
    
    stats = get_or_create_user_stats(user)
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∑–∞–Ω–æ–≤–æ
    created_quizzes = Quiz.objects.filter(user=user).count()
    completed_quizzes = Quiz.objects.filter(user=user, score__isnull=False).count()
    
    user_answers = UserAnswer.objects.filter(user=user)
    total_questions_answered = user_answers.count()
    total_correct_answers = user_answers.filter(is_correct=True).count()
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª
    completed_quiz_scores = Quiz.objects.filter(user=user, score__isnull=False).values_list('score', flat=True)
    average_score = sum(completed_quiz_scores) / len(completed_quiz_scores) if completed_quiz_scores else 0
    
    # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—á–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    total_points = 0
    for quiz in Quiz.objects.filter(user=user, score__isnull=False):
        quiz_answers = UserAnswer.objects.filter(user=user, question__quiz=quiz)
        quiz_questions = quiz_answers.count()
        quiz_correct = quiz_answers.filter(is_correct=True).count()
        total_points += calculate_quiz_points(quiz.score, quiz_questions, quiz_correct)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats.total_quizzes_created = created_quizzes
    stats.total_quizzes_completed = completed_quizzes
    stats.total_questions_answered = total_questions_answered
    stats.total_correct_answers = total_correct_answers
    stats.average_score = average_score
    stats.total_points = total_points
    stats.save()
    
    return stats


def force_check_all_achievements(user):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    stats = get_or_create_user_stats(user)
    achievements = Achievement.objects.all()
    
    for achievement in achievements:
        if not UserAchievement.objects.filter(user=user, achievement=achievement).exists():
            if check_achievement_condition(user, achievement, stats):
                UserAchievement.objects.create(user=user, achievement=achievement)
                stats.total_points += achievement.points
                stats.save()
                print(f"–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: {achievement.name}")


def update_stats_after_quiz_deletion(user):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∞"""
    stats = get_or_create_user_stats(user)
    
    # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    from .models import Quiz, UserAnswer
    created_quizzes = Quiz.objects.filter(user=user).count()
    completed_quizzes = Quiz.objects.filter(user=user, score__isnull=False).count()
    
    user_answers = UserAnswer.objects.filter(user=user)
    total_questions_answered = user_answers.count()
    total_correct_answers = user_answers.filter(is_correct=True).count()
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª
    completed_quiz_scores = Quiz.objects.filter(user=user, score__isnull=False).values_list('score', flat=True)
    average_score = sum(completed_quiz_scores) / len(completed_quiz_scores) if completed_quiz_scores else 0
    
    # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—á–∫–∏
    total_points = 0
    for quiz in Quiz.objects.filter(user=user, score__isnull=False):
        quiz_answers = UserAnswer.objects.filter(user=user, question__quiz=quiz)
        quiz_questions = quiz_answers.count()
        quiz_correct = quiz_answers.filter(is_correct=True).count()
        total_points += calculate_quiz_points(quiz.score, quiz_questions, quiz_correct)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats.total_quizzes_created = created_quizzes
    stats.total_quizzes_completed = completed_quizzes
    stats.total_questions_answered = total_questions_answered
    stats.total_correct_answers = total_correct_answers
    stats.average_score = average_score
    stats.total_points = total_points
    stats.save()
    
    return stats


def create_default_achievements():
    """–°–æ–∑–¥–∞–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    achievements_data = [
        {
            'name': '–ü–µ—Ä–≤—ã–π —à–∞–≥',
            'description': '–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —Ç–µ—Å—Ç',
            'icon': 'üéØ',
            'condition': 'first_quiz',
            'points': 25
        },
        {
            'name': '–°–æ–∑–¥–∞—Ç–µ–ª—å —Ç–µ—Å—Ç–æ–≤',
            'description': '–°–æ–∑–¥–∞–π—Ç–µ 5 —Ç–µ—Å—Ç–æ–≤',
            'icon': 'üìù',
            'condition': 'quiz_creator',
            'points': 50
        },
        {
            'name': '–ú–∞—Å—Ç–µ—Ä —Ç–µ—Å—Ç–æ–≤',
            'description': '–°–æ–∑–¥–∞–π—Ç–µ 10 —Ç–µ—Å—Ç–æ–≤',
            'icon': 'üèÜ',
            'condition': 'quiz_master',
            'points': 100
        },
        {
            'name': '–ü–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏—Å—Ç',
            'description': '–ü–æ–ª—É—á–∏—Ç–µ —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª 90%+ –Ω–∞ 5+ —Ç–µ—Å—Ç–∞—Ö',
            'icon': '‚≠ê',
            'condition': 'perfectionist',
            'points': 150
        },
        {
            'name': '–ö–æ—Ä–æ–ª—å —Ç–æ—á–Ω–æ—Å—Ç–∏',
            'description': '–ü–æ–ª—É—á–∏—Ç–µ —Ç–æ—á–Ω–æ—Å—Ç—å 95%+ –Ω–∞ 3+ —Ç–µ—Å—Ç–∞—Ö',
            'icon': 'üéØ',
            'condition': 'accuracy_king',
            'points': 200
        },
        {
            'name': '–°–∫–æ—Ä–æ—Å—Ç–Ω–æ–π –¥–µ–º–æ–Ω',
            'description': '–ó–∞–≤–µ—Ä—à–∏—Ç–µ 20 —Ç–µ—Å—Ç–æ–≤',
            'icon': '‚ö°',
            'condition': 'speed_demon',
            'points': 125
        },
        {
            'name': '–ü—Ä–µ–¥–∞–Ω–Ω—ã–π —É—á–µ–Ω–∏–∫',
            'description': '–ó–∞–≤–µ—Ä—à–∏—Ç–µ 50 —Ç–µ—Å—Ç–æ–≤',
            'icon': 'üî•',
            'condition': 'dedicated_learner',
            'points': 300
        },
        {
            'name': '–£—á–µ–Ω—ã–π',
            'description': '–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ 100 –≤–æ–ø—Ä–æ—Å–æ–≤',
            'icon': 'üìö',
            'condition': 'scholar',
            'points': 100
        },
        {
            'name': '–ú–∞—Å—Ç–µ—Ä –≤–æ–ø—Ä–æ—Å–æ–≤',
            'description': '–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ 500 –≤–æ–ø—Ä–æ—Å–æ–≤',
            'icon': 'üß†',
            'condition': 'question_master',
            'points': 250
        },
        {
            'name': '–ì–µ–Ω–∏–π',
            'description': '–ü–æ–ª—É—á–∏—Ç–µ —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª 95%+ –Ω–∞ 10+ —Ç–µ—Å—Ç–∞—Ö',
            'icon': 'üåü',
            'condition': 'genius',
            'points': 500
        },
        {
            'name': '–°–æ–±–∏—Ä–∞—Ç–µ–ª—å –æ—á–∫–æ–≤',
            'description': '–ù–∞–∫–æ–ø–∏—Ç–µ 500 –æ—á–∫–æ–≤',
            'icon': 'üí∞',
            'condition': 'points_collector',
            'points': 100
        },
        {
            'name': '–ú–∞—Å—Ç–µ—Ä –æ—á–∫–æ–≤',
            'description': '–ù–∞–∫–æ–ø–∏—Ç–µ 1000 –æ—á–∫–æ–≤',
            'icon': 'üíé',
            'condition': 'points_master',
            'points': 200
        }
    ]
    
    for data in achievements_data:
        Achievement.objects.get_or_create(
            name=data['name'],
            defaults=data
        )
